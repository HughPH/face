Utf8Json: Utf8Json.JsonSerializer.Deserialize<object>(json)
System.Text: System.Text.Json.JsonSerializer.Deserialize<object>(json, {...AllowTrailingCommas})
Face: Lantern.Face.Json.JsValue.FromJson(json)
Newtonsoft: Newtonsoft.Json.JsonConvert.DeserializeObject<object>(json)
Score is iterations/time

*** 0.186kb (appsettings.json) x 5000 iterations:
Utf8Json: 103.033/ms
System.Text: 21.990/ms
** Face: 357.380/ms
Newtonsoft: 28.208/ms

*** 28.572kb (one long string) x 5000 iterations:
Utf8Json: 9.838/ms
System.Text: 21.294/ms
** Face: 11.525/ms
Newtonsoft: 11.380/ms

*** 26.737kb (many short strings) x 5000 iterations:
Utf8Json: 1.404/ms
System.Text: 1.487/ms
** Face: 1.291/ms
Newtonsoft: 0.661/ms

*** 27.072kb (flat int array) x 5000 iterations:
Utf8Json: 366.307/sec
System.Text: 0.584/ms
** Face: 415.031/sec
Newtonsoft: 307.026/sec

*** 27.657kb (flat float array) x 5000 iterations:
Utf8Json: 1.390/ms
System.Text: 1.882/ms
** Face: 1.170/ms
Newtonsoft: 0.827/ms

*** 27.563kb (array of empty arrays) x 5000 iterations:
Utf8Json: 1.144/ms
System.Text: 398.461/sec
** Face: 1.332/ms
Newtonsoft: 322.406/sec

*** 27.423kb (array of empty objects) x 5000 iterations:
Utf8Json: 0.603/ms
System.Text: 392.181/sec
** Face: 0.545/ms
Newtonsoft: 305.289/sec

*** 28.032kb (array of small objects) x 5000 iterations:
Utf8Json: 473.292/sec
System.Text: 0.556/ms
** Face: 492.646/sec
Newtonsoft: 212.595/sec

*** 8.088kb (flat mixed array) x 5000 iterations:
Utf8Json: 3.279/ms
System.Text: 3.179/ms
** Face: 3.542/ms
Newtonsoft: 1.646/ms

*** 0.978kb (much whitespace) x 5000 iterations:
Utf8Json: 52.307/ms
System.Text: 25.890/ms
** Face: 64.467/ms
Newtonsoft: 40.148/ms

*** 0.322kb (generic data) x 5000 iterations:
Utf8Json: 123.203/ms
System.Text: 33.724/ms
** Face: 156.557/ms
Newtonsoft: 51.046/ms

*** 569.399kb (generated test data) x 500 iterations:
Utf8Json: 133.949/sec
System.Text: 158.473/sec
** Face: 127.483/sec
Newtonsoft: 70.947/sec

*** 24.890mb (github event log) x 50 iterations:
Utf8Json: 3.132/sec
System.Text: 3.880/sec
** Face: 2.261/sec
Newtonsoft: 1.311/sec

*** 180.987mb (street data) x 5 iterations:
Utf8Json: 0.206/sec
System.Text: 0.242/sec
** Face: 0.093/sec
Newtonsoft: 0.060/sec

*** 0.035kb ("truE") x 1 iterations:
Utf8Json: JsonParsingException: expected:'true', actual:'true', at offset:19
System.Text: JsonException: 'truE,
  4,
  5,
]' is an invalid JSON literal. Expected the literal 'true'. Path: $ | LineNumber: 4 | BytePositionInLine: 5. --> JsonReaderException: 'truE,
  4,
  5,
]' is an invalid JSON literal. Expected the literal 'true'. LineNumber: 4 | BytePositionInLine: 5.
** Face: ParseError: Expected value, found 'truE' at `[3]`, input position 19 (line 5)
Newtonsoft: JsonReaderException: Error parsing boolean value. Path '[2]', line 5, position 5.

*** 0.019kb (unclosed array) x 1 iterations:
Utf8Json: IndexOutOfRangeException: Index was outside the bounds of the array.
System.Text: JsonException: Expected depth to be zero at the end of the JSON payload. There is an open JSON object or array that should be closed. Path: $ | LineNumber: 0 | BytePositionInLine: 19. --> JsonReaderException: Expected depth to be zero at the end of the JSON payload. There is an open JSON object or array that should be closed. LineNumber: 0 | BytePositionInLine: 19.
** Face: ParseError: Past end of input at `[3][0]`
Newtonsoft: JsonWriterException: Unexpected end when reading token. Path '[3]'.

*** 0.034kb (bad object) x 1 iterations:
Utf8Json: InvalidOperationException: Invalid Json Token:EndObject
System.Text: JsonException: '}' is an invalid start of a value. Path: $ | LineNumber: 3 | BytePositionInLine: 0. --> JsonReaderException: '}' is an invalid start of a value. LineNumber: 3 | BytePositionInLine: 0.
** Face: ParseError: Expected value, found '}' at `hello`, input position 34 (line 4)
Newtonsoft: JsonReaderException: Unexpected character encountered while parsing value: }. Path 'hello', line 4, position 0.

*** 0.020kb (extra '"') x 1 iterations:
Utf8Json: JsonParsingException: expected:',', actual:'"', at offset:17
System.Text: JsonException: '"' is invalid after a value. Expected either ',', '}', or ']'. Path: $ | LineNumber: 1 | BytePositionInLine: 15. --> JsonReaderException: '"' is invalid after a value. Expected either ',', '}', or ']'. LineNumber: 1 | BytePositionInLine: 15.
** Face: ParseError: Expected ',' or '}' following value, found '"' at `name`, input position 17 (line 2)
Newtonsoft: JsonReaderException: After parsing a value an unexpected character was encountered: ". Path 'name', line 2, position 15.

*** 0.014kb (non-ParseError base) x 1 iterations:
Utf8Json: 135.135/ms
System.Text: JsonException: ']' is invalid within a number, immediately after a sign character ('+' or '-'). Expected a digit ('0'-'9'). Path: $ | LineNumber: 0 | BytePositionInLine: 13. --> JsonReaderException: ']' is invalid within a number, immediately after a sign character ('+' or '-'). Expected a digit ('0'-'9'). LineNumber: 0 | BytePositionInLine: 13.
** Face: ParseError: Failed to parse number at `[2]`, input position 13 --> FormatException: Input string was not in a correct format.
Newtonsoft: JsonReaderException: Input string '0e' is not a valid number. Path '[2]', line 1, position 13.

*** 0.189kb (nested error) x 1 iterations:
Utf8Json: JsonParsingException: Invalid Character"
System.Text: JsonException: '"' is not a hex digit following '\u' within a JSON string. The string should be correctly escaped. Path: $ | LineNumber: 11 | BytePositionInLine: 26. --> JsonReaderException: '"' is not a hex digit following '\u' within a JSON string. The string should be correctly escaped. LineNumber: 11 | BytePositionInLine: 26.
** Face: ParseError: Failed to parse \u sequence at `things[1].polygon[1]{"bad y"}`, input position 161 (line 12) --> FormatException: Input string was not in a correct format.
Newtonsoft: JsonReaderException: Invalid Unicode escape sequence: \u4"
 . Path 'things[1].polygon[1]['bad y']', line 12, position 25.